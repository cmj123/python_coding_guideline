{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector This is a simple vector python package.","title":"Start"},{"location":"#fastvector","text":"This is a simple vector python package.","title":"FastVector"},{"location":"api/","text":"References Vector Class Own implementation of a 2D vector class. Vector2D Vector2D class to perform simple vector operations. Source code in fastvector/vector.pytotal_ordering class Vector2D : '''Vector2D class to perform simple vector operations. ''' def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) def check_vector_types ( self , vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( self , Vector2D ) or not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' ) def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' self . check_vector_types ( other_vector ) is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) __abs__ () Return the length (magnitude) of the vector instance. Returns: Name Type Description float float Length of the vector instance. Source code in fastvector/vector.py 66 67 68 69 70 71 72 def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) __add__ ( other_vector ) Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description Vector2D Vector2D The additon vector of the self and the other vector instance. Source code in fastvector/vector.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) __bool__ () Return the truth value of the vector instance. Returns: Name Type Description bool bool True, if the vector is not the Null-vector. False, else. Source code in fastvector/vector.py 58 59 60 61 62 63 64 def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) __call__ () Callable for the vector instance representation. Returns: Name Type Description str str The representation of the vector instance. Source code in fastvector/vector.py 33 34 35 36 37 38 39 40 def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () __eq__ ( other_vector ) Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Name Type Description bool bool True, if the both vector instances have the same values. False, else. Source code in fastvector/vector.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' self . check_vector_types ( other_vector ) is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal __init__ ( x = 0 , y = 0 ) Create a vector instance with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. Defaults to 0. 0 y SupportsFloat y-Value. Defaults to 0. 0 Raises: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) __lt__ ( other_vector ) Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description bool bool True, if the self instance is less than the other vector instance. False, else. Source code in fastvector/vector.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than __mul__ ( other ) Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union [ SupportsFloat , Vector2D ] Other vector instance or scaler value (right-hand-side of the operator) required Raises: Type Description TypeError Not int/float passed in. Returns: Type Description Union [ SupportsFloat , Vector2D ] Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) __repr__ () Return the vector instance representation. Returns: Name Type Description str str The representation of the vector instance. Source code in fastvector/vector.py 42 43 44 45 46 47 48 def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' __str__ () The vector instance as a string. Returns: Name Type Description str str The vector instance as a string. Source code in fastvector/vector.py 50 51 52 53 54 55 56 def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' __sub__ ( other_vector ) Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description Vector2D Vector2D The subtraction vector of the self and the other vector instance. Source code in fastvector/vector.py 131 132 133 134 135 136 137 138 139 140 141 142 143 def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) __truediv__ ( other ) Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other SupportsFloat Other vector instance or scaler value (right-hand-side of the operator). required Raises: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Name Type Description SupportsFloat Vector2D The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) check_vector_types ( vector ) Check if the vector is an instance of the Vector2D class. Parameters: Name Type Description Default vector object A vector instance. required Raises: Type Description TypeError If vector is not an instance of the Vector2D class. Source code in fastvector/vector.py 74 75 76 77 78 79 80 81 82 83 84 def check_vector_types ( self , vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( self , Vector2D ) or not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#vector-class","text":"Own implementation of a 2D vector class.","title":"Vector Class"},{"location":"api/#fastvector.vector.Vector2D","text":"Vector2D class to perform simple vector operations. Source code in fastvector/vector.pytotal_ordering class Vector2D : '''Vector2D class to perform simple vector operations. ''' def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) def check_vector_types ( self , vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( self , Vector2D ) or not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' ) def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' self . check_vector_types ( other_vector ) is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' )","title":"Vector2D"},{"location":"api/#fastvector.vector.Vector2D.__abs__","text":"Return the length (magnitude) of the vector instance. Returns: Name Type Description float float Length of the vector instance. Source code in fastvector/vector.py 66 67 68 69 70 71 72 def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 )","title":"__abs__()"},{"location":"api/#fastvector.vector.Vector2D.__add__","text":"Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description Vector2D Vector2D The additon vector of the self and the other vector instance. Source code in fastvector/vector.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y )","title":"__add__()"},{"location":"api/#fastvector.vector.Vector2D.__bool__","text":"Return the truth value of the vector instance. Returns: Name Type Description bool bool True, if the vector is not the Null-vector. False, else. Source code in fastvector/vector.py 58 59 60 61 62 63 64 def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self ))","title":"__bool__()"},{"location":"api/#fastvector.vector.Vector2D.__call__","text":"Callable for the vector instance representation. Returns: Name Type Description str str The representation of the vector instance. Source code in fastvector/vector.py 33 34 35 36 37 38 39 40 def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ ()","title":"__call__()"},{"location":"api/#fastvector.vector.Vector2D.__eq__","text":"Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Name Type Description bool bool True, if the both vector instances have the same values. False, else. Source code in fastvector/vector.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' self . check_vector_types ( other_vector ) is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal","title":"__eq__()"},{"location":"api/#fastvector.vector.Vector2D.__init__","text":"Create a vector instance with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. Defaults to 0. 0 y SupportsFloat y-Value. Defaults to 0. 0 Raises: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' )","title":"__init__()"},{"location":"api/#fastvector.vector.Vector2D.__lt__","text":"Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description bool bool True, if the self instance is less than the other vector instance. False, else. Source code in fastvector/vector.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than","title":"__lt__()"},{"location":"api/#fastvector.vector.Vector2D.__mul__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union [ SupportsFloat , Vector2D ] Other vector instance or scaler value (right-hand-side of the operator) required Raises: Type Description TypeError Not int/float passed in. Returns: Type Description Union [ SupportsFloat , Vector2D ] Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' )","title":"__mul__()"},{"location":"api/#fastvector.vector.Vector2D.__repr__","text":"Return the vector instance representation. Returns: Name Type Description str str The representation of the vector instance. Source code in fastvector/vector.py 42 43 44 45 46 47 48 def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.Vector2D.__str__","text":"The vector instance as a string. Returns: Name Type Description str str The vector instance as a string. Source code in fastvector/vector.py 50 51 52 53 54 55 56 def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )'","title":"__str__()"},{"location":"api/#fastvector.vector.Vector2D.__sub__","text":"Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Name Type Description Vector2D Vector2D The subtraction vector of the self and the other vector instance. Source code in fastvector/vector.py 131 132 133 134 135 136 137 138 139 140 141 142 143 def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y )","title":"__sub__()"},{"location":"api/#fastvector.vector.Vector2D.__truediv__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other SupportsFloat Other vector instance or scaler value (right-hand-side of the operator). required Raises: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Name Type Description SupportsFloat Vector2D The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' )","title":"__truediv__()"},{"location":"api/#fastvector.vector.Vector2D.check_vector_types","text":"Check if the vector is an instance of the Vector2D class. Parameters: Name Type Description Default vector object A vector instance. required Raises: Type Description TypeError If vector is not an instance of the Vector2D class. Source code in fastvector/vector.py 74 75 76 77 78 79 80 81 82 83 84 def check_vector_types ( self , vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( self , Vector2D ) or not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"check_vector_types()"}]}